//1st solution by temporary array

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> resultant(n);  // Create a resultant array of the same size

        // Normalize k in case it's larger than the array size
        k = k % n;

        // Correctly place each element at its new position in resultant
        for (int i = 0; i < n; i++) {
            resultant[(i + k) % n] = nums[i];
        }

        // Copy the resultant array back to the original nums array
        for (int i = 0; i < n; i++) {
            nums[i] = resultant[i];
        }
    }
};






// Second solution by reversal algorithm - T(n) - O(n) and S(n) - O(1)

class Solution {
public:
void reverseArray(vector<int>& nums , int start , int end ){
        while(start<end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
}
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k % n;
        int start;
        int end;
        reverseArray(nums,0,n-1);
        reverseArray(nums,0,k-1);
        reverseArray(nums,k,n-1);
        
    }
    

    
};

