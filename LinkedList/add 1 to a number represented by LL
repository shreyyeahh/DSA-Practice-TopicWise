/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public: 
  Node* reverseLL(Node* head) {
      Node* current = head;
      Node* prev = nullptr;
      Node* nextNode = nullptr;
      
      while (current != nullptr) {
          nextNode = current->next;
          current->next = prev;
          prev = current;
          current = nextNode;
      }
      return prev;
  }
    
  public:
    Node* addOne(Node* head) {
        head = reverseLL(head);  // Reverse the linked list
        Node* temp = head;
        int carry = 1;

        while (temp != nullptr) {
            temp->data = temp->data + carry;
            if (temp->data < 10) {  // No carry needed
                carry = 0;
                break;
            }
           
            temp->data = 0;  // Set to 0 and propagate carry
            temp = temp->next;
        }

        if (carry == 1) {
            head = reverseLL(head);
            Node* newNode = new Node(1);// If carry still remains, add a new node
            newNode->next = head;
            return newNode;
        }

        head = reverseLL(head);  // Reverse back to original order
        return head;
    }
};